<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Jimmy's blog]]></title>
  <link href="http://jianiau.github.io/atom.xml" rel="self"/>
  <link href="http://jianiau.github.io/"/>
  <updated>2016-01-05T21:47:44+08:00</updated>
  <id>http://jianiau.github.io/</id>
  <author>
    <name><![CDATA[Jimmy Huang]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[EuroDOCSIS Certificate]]></title>
    <link href="http://jianiau.github.io/blog/2016/01/03/eurodocsis-certificate/"/>
    <updated>2016-01-03T23:34:51+08:00</updated>
    <id>http://jianiau.github.io/blog/2016/01/03/eurodocsis-certificate</id>
    <content type="html"><![CDATA[<p>EuroDOCSIS 的 BPI+ 規範基本上和 DOCSIS 是一樣的, 只是 certificates 的一些欄位名稱換一下而已</p>

<p>EuroDOCSIS Root Certificate</p>

<pre><code>countryName=BE
organizationName=tComLabs – Euro-DOCSIS
organizationalUnitName=Cable Modems
commonName= Euro-DOCSIS Cable Modem Root CA
</code></pre>

<p>EuroDOCSIS Manufacturer Certificate</p>

<pre><code>countryName=&lt;Country of Manufacturer&gt;
[stateOrProvinceName=&lt;state/province&gt;]
[localityName=&lt;City&gt;]
organizationName=&lt;Company Name&gt;
organizationalUnitName=Euro-DOCSIS
[organizationalUnitName=&lt;Manufacturing Location&gt;]
commonName=&lt;Company Name&gt; Cable Modem Root Certificate Authority
</code></pre>

<p class="info">
比較特別是 oganizationalUnitName 的值也可以是 DOCSIS
</p>

<p>EuroDOCSIS Code Verification Certificate</p>

<pre><code>countryName = &lt;country&gt;
organizationName = &lt;Manufacturer organizationName from CA Certificate&gt;
organizationalUnitName = Euro-DOCSIS
commonName = Code Verification Certificate
</code></pre>

<h2 id="section">參考資料</h2>

<ul>
  <li>EuroDOCSIS.BPI+Req.pdf Rev:7.0</li>
</ul>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[DOCSIS Certificate]]></title>
    <link href="http://jianiau.github.io/blog/2016/01/03/docsis-certificate/"/>
    <updated>2016-01-03T01:10:13+08:00</updated>
    <id>http://jianiau.github.io/blog/2016/01/03/docsis-certificate</id>
    <content type="html"><![CDATA[<p>DOCSIS 是從 DOCSIS 1.1 (BPI+) 開始使用 certificate 來驗證 CM 和 CMTS 之間金鑰交換的訊息, 在 DOCSIS 1.0 (BPI), CM 送出 AUTH-REQ 時沒有憑證, 直接丟出 RSA public key, BPI+ 加強了這一階段的驗證, CM 要送出 AUTH-INFO (CA certificate), AUTH-REQ (CM certificate), 讓 CMTS 驗證 CM 來源是否正確</p>

<h2 id="bpi-certificate-">BPI+ Certificate 架構</h2>

<p>BPI+ certificate 共有 3 層</p>

<ul>
  <li>DOCSIS Root CA certificate</li>
  <li>Manufacturer CA (distributed model) or CableLabs Mfg CA (centralized model) certificates</li>
  <li>CM Device certificate</li>
</ul>

<p class="info">
Cablelabs 已經不再簽發 Manufacturer CA certificate, 只剩下 centralized model, 另外 Root 除了簽發 Mfg CA certificate 以外, 也用來簽發 Code Verification Certificate (Legacy-PKI) 和 CableLabs DOCSIS CVC CA Certificate (New-PKI)
</p>

<!-- more -->

<h2 id="certificate-">Certificate 格式</h2>

<table>
  <thead>
    <tr>
      <th style="text-align: left">X.509 v3 Field</th>
      <th style="text-align: left">Description</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td style="text-align: left">tbsCertificate.version</td>
      <td style="text-align: left">Indicates the certificate version. Always set to v3 (value is 2)</td>
    </tr>
    <tr>
      <td style="text-align: left">tbsCertificate.serialNumber</td>
      <td style="text-align: left">Unique integer assigned by the issuing CA to the certificate</td>
    </tr>
    <tr>
      <td style="text-align: left">tbsCertificate.signature</td>
      <td style="text-align: left">OID and optional parameters defining the algorithm used to sign the certificate. This field contains the same algorithm identifier as the signatureAlgorithm field below</td>
    </tr>
    <tr>
      <td style="text-align: left">tbsCertificate.issuer</td>
      <td style="text-align: left">Distinguished Name of the CA that issued the certificate</td>
    </tr>
    <tr>
      <td style="text-align: left">Certificate.validity</td>
      <td style="text-align: left">Defines when the certificate becomes active and when it expires</td>
    </tr>
    <tr>
      <td style="text-align: left">tbsCertificate.subject</td>
      <td style="text-align: left">Distinguished Name identifying the entity whose public key is certified in the subjectPublicKeyInfo field</td>
    </tr>
    <tr>
      <td style="text-align: left">tbsCertificate.subjectPublicKeyInfo</td>
      <td style="text-align: left">Field contains the public key material (public key and parameters) and the identifier of the algorithm with which the key is used</td>
    </tr>
    <tr>
      <td style="text-align: left">tbsCertificate.issuerUniqueID</td>
      <td style="text-align: left">Optional field to allow reuse of issuer names over time</td>
    </tr>
    <tr>
      <td style="text-align: left">tbsCertificate.subjectUnique ID</td>
      <td style="text-align: left">Optional field to allow reuse of subject names over time</td>
    </tr>
    <tr>
      <td style="text-align: left">tbsCertificate.extensions</td>
      <td style="text-align: left">Extension data</td>
    </tr>
    <tr>
      <td style="text-align: left">SignatureAlgorithm</td>
      <td style="text-align: left">OID and optional parameters defining the algorithm used to sign the certificate. This field contains the same algorithm identifier as the signature field in tbsCertificate</td>
    </tr>
    <tr>
      <td style="text-align: left">signatureValue</td>
      <td style="text-align: left">Digital signature computed over the ASN.1 DER-encoded tbsCertificate</td>
    </tr>
  </tbody>
</table>

<p><br /></p>

<dl>
  <dt><strong>signature</strong></dt>
  <dd>
    <p>DOCSIS 3.0 以前的 certificates 用的都是 <a href="http://www.alvestrand.no/objectid/1.2.840.113549.1.1.5.html">sha1WithRSAEncryption</a>, DOCSIS 3.1 開始改成 <a href="http://www.alvestrand.no/objectid/1.2.840.113549.1.1.11.html">sha256WithRSAEncryption</a></p>
  </dd>
  <dt><strong>validity</strong></dt>
  <dd>
    <p>DOCSIS 3.0 以前使用 ASN.1 UTCTime 編碼, 時間範圍是 1950~2049, 3.1 之後時間會超過 2050, 超過的部份改用 GeneralizedTime 編碼</p>
  </dd>
  <dt><strong>issuer, subject</strong></dt>
  <dd>
    <p>這裡的文字編碼一律先採用 PrintableString set, 若出現其他字元 DOCSIS 3.0 用 T.61/TeletexString, DOCSIS 3.1 用 UTF8String</p>
  </dd>
</dl>

<p>Legacy-PKI</p>

<pre><code>DOCSIS Root Certificate  
  countryName=US
  organizationName=Data Over Cable Service Interface Specifications
  organizationalUnitName=Cable Modems
  commonName=DOCSIS Cable Modem Root Certificate Authority
 
CableLabs Mfg CA Certificate
  countryName=US
  organizationName=CableLabs, Inc.
  organizationalUnitName=DOCSIS
  organizationalUnitName=D CA00001
  commonName=CableLabs, Inc. Cable Modem Root Certificate

Manufacturer CA Certificate
  countryName=&lt;Country of Manufacturer&gt;
  [stateOrProvinceName=&lt;state/province&gt;]
  [localityName=&lt;City&gt;]
  organizationName=&lt;Company Name&gt;
  organizationalUnitName=DOCSIS
  [organizationalUnitName=&lt;Manufacturing Location&gt;]
  commonName=&lt;Company Name&gt; [&lt;Serial Identifier&gt;] Cable Modem Root Certificate Authority [&lt;SerialIdentifier&gt;]

CM Device Certificate
  countryName=&lt;Country of Manufacturer&gt;
  organizationName=&lt;Company Name&gt;
  organizationalUnitName=&lt;manufacturing location&gt;
  [commonName=&lt;Serial Number&gt;]
  commonName=&lt;MAC Address&gt;

Code Verification Certificate
  countryName＝&lt;country of subject company&gt;
  organizationName=&lt;subject code-signing agent&gt;
  organizationalUnitName=DOCSIS
  commonName=Code Verification Certificate
</code></pre>

<p>用 <code>[]</code> 標示的欄位可以省略, 用<code>&lt;&gt;</code> 標示的欄位要填入相對應的值, countryName 是 2 碼的 <a href="http://www.chemie.fu-berlin.de/diverse/doc/ISO_3166.html">country code</a>, CM MAC 格式範例為 00:55:66:11:22:33</p>

<p class="info">
DOCSIS 3.0 之後的 CM certificate 已經不再使用 commonName=Serial Number
</p>

<p>New-PKI</p>

<pre><code>CableLabs Root CA Certificate
  c=US
  o=CableLabs
  ou=Root CA01
  cn=CableLabs Root Certification Authority

CableLabs Device CACertificate
  c=US
  o=CableLabs
  ou=Device CA01
  cn=CableLabs Device Certification Authority

CM Device Certificate
  c=&lt;Country of Manufacturer&gt;
  o=&lt;Company Name&gt;
  ou=&lt;Manufacturing Location&gt;
  cn=&lt;MAC Address&gt;

CableLabs DOCSIS CVC CA Certificate
  c=US
  o=CableLabs
  ou=CVC CA01
  cn=CableLabs CVC Certification Authority

Code Verification Certificate
  c=&lt;Country of Manufacturer&gt;
  o=&lt;Company Name&gt;
  cn=Code Verification Certificate
</code></pre>

<p class="info">
DOCSIS 3.1 只有 Centralized Model, 沒有 Manufacturer CA certificate 了, CVC 的 chain 則是多了一層 CableLabs DOCSIS CVC CA
</p>

<dl>
  <dt><strong>subjectPublicKeyInfo</strong></dt>
  <dd>
    <p>所有的 DOCSIS certificate 用的都是 <a href="http://www.alvestrand.no/objectid/1.2.840.113549.1.1.1.html">rsaEncryption</a>, 差別在於 key 的長度不同</p>
  </dd>
  <dt><strong>issuerUniqueID,subjectUniqueID</strong></dt>
  <dd>
    <p>所有的 DOCSIS certificates 都沒用到這兩個欄位</p>
  </dd>
</dl>

<p><strong>extensions</strong></p>

<p>以下只列出必須有的 extension</p>

<p>Legacy-PKI</p>

<pre><code>DOCSIS Root CA Certificate
  X509v3 extensions:
      X509v3 Basic Constraints: critical
          CA:TRUE, pathlen:1
      X509v3 Key Usage: critical
          Certificate Sign, CRL Sign

CableLabs Mfg CA Certificate
   X509v3 extensions:
       X509v3 Basic Constraints: critical
           CA:TRUE, pathlen:0
       X509v3 Key Usage: critical
           Certificate Sign, CRL Sign

Manufacturer CA Certificates
  X509v3 extensions:
      X509v3 Basic Constraints: critical
          CA:TRUE, pathlen:0
      X509v3 Key Usage: critical
          Certificate Sign, CRL Sign

Code Verification Certificate
  X509v3 extensions:
      X509v3 Extended Key Usage: critical
          Code Signing
</code></pre>

<p class="info">
Manufacturer CA Certificates 也可以沒有這些 extensions
</p>

<p>New-PKI</p>

<pre><code>CableLabs Root CA Certificate
  X509v3 extensions:
      X509v3 Basic Constraints: critical
          CA:TRUE
      X509v3 Key Usage: critical
          Certificate Sign, CRL Sign
      X509v3 Subject Key Identifier:
          Calculated per Method 1

CableLabs Device CACertificate
  X509v3 extensions:
      X509v3 Key Usage: critical
          Certificate Sign, CRL Sign
      X509v3 Basic Constraints: critical
          CA:TRUE, pathlen:0
      X509v3 Subject Key Identifier: 
          Calculated per Method 1
      X509v3 Authority Key Identifier:
          Calculated per Method 1

CM Device Certificate
  X509v3 extensions:
      X509v3 Key Usage: critical
        Digital Signature, Key Encipherment
      X509v3 Authority Key Identifier:
        Calculated per Method 1

CableLabs DOCSIS CVC CA Certificate
  X509v3 extensions:
      X509v3 Key Usage: critical
          Certificate Sign, CRL Sign
      X509v3 Basic Constraints: critical
          CA:TRUE, pathlen:0
      X509v3 Subject Key Identifier:
          Calculated per Method 1 
      X509v3 Authority Key Identifier: 
          Calculated per Method 1

Code Verification Certificate
  X509v3 extensions:
      X509v3 Extended Key Usage: critical
          Code Signing
      X509v3 Authority Key Identifier:
        Calculated per Method 1
</code></pre>

<p class="info">
Authority, Subject Key Identifier 計算方法 <a href="https://tools.ietf.org/html/rfc5280#section-4.2.1.2">RFC5280</a>
</p>

<h2 id="section">參考資料</h2>
<ul>
  <li>CM-SP-BPI+-C01-081104</li>
  <li>CM-SP-SECv3.0-I15-130808</li>
  <li>CM-SP-SECv3.1-I05-151210</li>
</ul>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Generate DOCSIS CVC]]></title>
    <link href="http://jianiau.github.io/blog/2015/12/30/generate-docsis-cvc/"/>
    <updated>2015-12-30T22:18:09+08:00</updated>
    <id>http://jianiau.github.io/blog/2015/12/30/generate-docsis-cvc</id>
    <content type="html"><![CDATA[<p>Code Verification Certificate (CVC) 是 cable modem 作 secure software download (SSD) 時提供給 CM 驗證 image 用的憑證, 
當 manufacturer 要出新的 software 時, 會用 private key 簽名, 並把含有相對應 public key 的 certificate (也就是 CVC) 丟給 CM 驗證, CM 先檢查 CVC, 確認 CVC 正確後就能用 CVC 裡面的 public key 檢查 software 的簽名是否正確, 利用這種方式來驗證 software 的可靠性與正確性</p>

<p>通常, 這個 private key 都會放在一個需要重重關卡才能進入的地方, 所以要測試 CM SSD 功能時會用 Test CVC, 製作 Test CVC 的步驟很簡單, 只要裝好 <a href="https://www.openssl.org/community/binaries.html">OpenSSL</a> 就可以開始製作, CableLabs 有詳細的步驟說明</p>

<!-- more -->

<p>到 <a href="http://cablelabs.com/resources/digital-certificate-issuance-service/">Cablelabs</a> 下載 Test Certificates</p>

<h2 id="legacy-pki-docsis-30-">Legacy PKI (DOCSIS 3.0 以前的版本)</h2>

<p><strong>1. 製作 csr_config.txt</strong></p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>csr_config.txt </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
</pre></td><td class="code"><pre><code class="ini"><span class="line"><span class="k">[ req ]</span>
</span><span class="line"><span class="na">default_keyfile</span> <span class="o">=</span> <span class="s">TEST_DOCSIS_MFR_CVC_PRIVATEKEY.pem</span>
</span><span class="line"><span class="na">default_md</span> <span class="o">=</span> <span class="s">sha1</span>
</span><span class="line"><span class="na">prompt</span> <span class="o">=</span> <span class="s">no</span>
</span><span class="line"><span class="na">distinguished_name</span> <span class="o">=</span> <span class="s">req_DN</span>
</span><span class="line">
</span><span class="line"><span class="c1"># Certificate Distinguished Name</span>
</span><span class="line"><span class="k">[req_DN]</span>
</span><span class="line"><span class="na">C</span> <span class="o">=</span> <span class="s">TW</span>
</span><span class="line"><span class="na">O</span> <span class="o">=</span>  <span class="s">Jimmy Test</span>
</span><span class="line"><span class="na">OU</span> <span class="o">=</span> <span class="s">DOCSIS</span>
</span><span class="line"><span class="na">CN</span> <span class="o">=</span> <span class="s">TEST Code Verification Certificate</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>O 的值要和 CM 的 manufacturer’s organizationName 一致</p>

<p><strong>2. 用以下指令產生 CSR 和 private key</strong></p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>bash </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line">openssl req -newkey rsa:2048 -config csr_config.txt -out csr.pem -nodes
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>如果是要製作實際在用的 CVC, 作到這一步就可以了, 把 private key 保管好, csr 送給 CableLabs, <a href="http://cablelabs.com/wp-content/uploads/2013/11/DCAA_DOCSIS.pdf">簽約</a>, 繳費 CableLabs 就會處理接下來的事情, 若是要做 Test CVC 就繼續往下做</p>

<p><strong>3. 製作 extension 欄位的設定檔 ext.txt</strong></p>
<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>ext.txt</span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="ini"><span class="line"><span class="na">extendedKeyUsage</span> <span class="o">=</span> <span class="s">critical,codeSigning</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p><strong>4.用 Test DOCSIS Root Key 簽發憑證</strong></p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>bash </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line">openssl x509 -req -days <span class="m">3653</span> -in csr.pem -CA TEST_DOCSIS_CABLE_MODEM_ROOT_CA.PEM <span class="se">\</span>
</span><span class="line">-CAkey TEST_DOCSIS_CABLE_MODEM_ROOT_CA_PrivateKey.PEM -CAcreateserial <span class="se">\</span>
</span><span class="line">-extfile ext.txt -sha1 -out TEST_DOCSIS_MFR_CVC.crt
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>然後就能拿 TEST_DOCSIS_MFR_CVC.crt 和 TEST_DOCSIS_MFR_CVC_PRIVATEKEY.pem 去 sign image 了</p>

<h2 id="new-pki-docsis-31">New PKI (DOCSIS 3.1)</h2>

<p>製作 DOCSIS 3.1 的 CVC 方法和 3.0 的差不多, 設定檔和 CA 換一下就可以了</p>

<p><strong>1. 製作 csr_config.txt</strong></p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>csr_config.txt</span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
</pre></td><td class="code"><pre><code class="ini"><span class="line"><span class="k">[ req ]</span>
</span><span class="line"><span class="na">default_keyfile</span> <span class="o">=</span> <span class="s">TEST_DOCSIS31_MFR_CVC_PRIVATEKEY.PEM</span>
</span><span class="line"><span class="na">default_md</span> <span class="o">=</span> <span class="s">sha256</span>
</span><span class="line"><span class="na">prompt</span> <span class="o">=</span> <span class="s">no</span>
</span><span class="line"><span class="na">string_mask</span> <span class="o">=</span> <span class="s">nombstr</span>
</span><span class="line"><span class="na">distinguished_name</span> <span class="o">=</span> <span class="s">req_DN</span>
</span><span class="line">
</span><span class="line"><span class="c1"># Certificate Distinguished Name</span>
</span><span class="line"><span class="k">[req_DN]</span>
</span><span class="line"><span class="na">C</span> <span class="o">=</span> <span class="s">TW</span>
</span><span class="line"><span class="na">O</span> <span class="o">=</span> <span class="s">Jimmy Test</span>
</span><span class="line"><span class="na">CN</span> <span class="o">=</span> <span class="s">TEST Code Verification Certificate</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>3.1 的演算法變成 SHA-256</p>

<p><strong>2. 產生 CSR 和 private key</strong></p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>bash </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line">openssl req -newkey rsa:2048 -config csr_config.txt -out csr.pem -nodes
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>3.1 CVC RSA key length 變為 2048 bits</p>

<p><strong>3. 製作 extension 欄位的設定檔 ext.txt</strong></p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>ext.txt</span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="ini"><span class="line"><span class="na">extendedKeyUsage</span><span class="o">=</span><span class="s">critical,codeSigning</span>
</span><span class="line"><span class="na">authorityKeyIdentifier</span><span class="o">=</span><span class="s">keyid,issuer</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>3.1 CVC 多了 authorityKeyIdentifier 這個 extension, authorityKeyIdentifier 的值會是 CVC CA 的 subjectKeyIdentifier<sup id="fnref:1"><a href="#fn:1" class="footnote">1</a></sup></p>

<p><strong>4. 用 Test DOCSIS CVC CA Key 簽發憑證</strong></p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>bash </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line">openssl x509 -req -days <span class="m">3653</span> -in csr.pem -CA TEST_CABLELABS_CVC_CERTIFICATION_AUTHORITY_PEM.CRT <span class="se">\</span>
</span><span class="line">-CAkey TEST_CABLELABS_CVC_CERTIFICATION_AUTHORITY_PRIVATEKEY.PEM -CAcreateserial -extfile ext.txt <span class="se">\</span>
</span><span class="line">-sha256 -out TEST_DOCSIS31_MFR_CVC_PEM.CRT
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>3.1 CVC 的 chain 多了一張 CVC CA, 不再是直接由 Root 簽發, 製作 signed image 時除了 CVC 和 private key 之外也要把 CVC CA 包進去</p>

<div class="footnotes">
  <ol>
    <li id="fn:1">
      <p><a href="https://www.openssl.org/docs/manmaster/apps/x509v3_config.html#Authority-Key-Identifier">OpenSSL x509v3 config</a> <a href="#fnref:1" class="reversefootnote">&#8617;</a></p>
    </li>
  </ol>
</div>
]]></content>
  </entry>
  
</feed>
